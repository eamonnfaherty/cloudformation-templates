AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: |
  This creates a few things in your account:
    - It will create a lambda that allows you to add all members of an organisational unit.
    - It will create a custom resource that will trigger that when the stack is created.
    - It will optionally create a CloudWatch Event rule that triggers on the given ScheduledExpression.

Parameters:
  AssumableOrgRoleArn:
    Type: String
    Description: The IAM Role ARN that can be assumed from the account this template is run in
  TargetOU:
    Type: String
    Description: The path or ou id used to search for members in
  SpokeIAMPath:
    Type: String
    Default: /guardduty-enabler/
    Description: The path of the spoke role that should be assumed to enable guardduty in
  SpokeIAMRole:
    Type: String
    Default: EnablerFunctionRole
    Description: The name of the spoke role that should be assumed to enable guardduty in
  ScheduleExpression:
    Type: String
    Default: None
    Description: Cron or rate expressions to pass through to an AWS::Events::Rule

Conditions:
  NeedsScheduling: !Not [!Equals [!Ref ScheduleExpression, None ]]

Resources:
  EnablerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /guardduty-enabler/
      Policies:
        - PolicyName: ServiceCatalogActions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: arn:aws:iam::*:role/guardduty-enabler/EnablerFunctionRole
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !Ref AssumableOrgRoleArn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonGuardDutyFullAccess

  EnablerFunction:
    Type: AWS::Serverless::Function
    Description: |
      A lambda function that can be invoked with a param similar to ```{"target_ou": "/"}``` that will get all children within
      the target_ou and enable guardduty and invite to the master.
    Properties:
      Runtime: python3.7
      Handler: index.handler
      CodeUri: ./deploy
      Timeout: 900
      Role: !GetAtt EnablerFunctionRole.Arn
      Environment:
        Variables:
          ASSUMABLE_ORG_ROLE_ARN: !Ref AssumableOrgRoleArn
          SPOKE_IAM_PATH: !Ref SpokeIAMPath
          SPOKE_IAM_ROLE: !Ref SpokeIAMRole

  EnablerFunctionCallerRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /guardduty-enabler/
      Policies:
        - PolicyName: NeededActions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt EnablerFunction.Arn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute

  EnablerFunctionCusomResource:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.7
      Handler: index.handler_custom_resource
      CodeUri: ./deploy
      Timeout: 900
      Role: !GetAtt EnablerFunctionCallerRole.Arn
      Environment:
        Variables:
          TARGET_OU: !Ref TargetOU

  Enable:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt EnablerFunctionCusomResource.Arn
      AssumableOrgRoleArn: !Ref AssumableOrgRoleArn
      TargetOU: !Ref TargetOU
      SpokeIAMPath: !Ref SpokeIAMPath
      SpokeIAMRole: !Ref SpokeIAMRole

  EnablerFunctionScheduler:
    Type: AWS::Serverless::Function
    Condition: NeedsScheduling
    Properties:
      Runtime: python3.7
      Handler: index.handler_scheduler
      CodeUri: ./deploy
      Timeout: 900
      Role: !GetAtt EnablerFunctionCallerRole.Arn
      Environment:
        Variables:
          TARGET_OU: !Ref TargetOU

  SchedulingRule:
    Type: AWS::Events::Rule
    Condition: NeedsScheduling
    Properties:
      Description: !Sub "Invites and add members from ${TargetOU} to the GuardDuty master"
      ScheduleExpression: !Ref ScheduleExpression
      Targets:
        - Arn: !GetAtt EnablerFunctionScheduler.Arn
          Id: !Ref EnablerFunctionScheduler

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref EnablerFunctionScheduler
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SchedulingRule.Arn

Outputs:
  EnablerFunctionName:
    Description: |
      The Lambda you can invoke with a param of ```{"target_ou": "/"}```
    Value: !Ref EnablerFunction